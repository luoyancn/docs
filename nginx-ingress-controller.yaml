apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  labels:
    k8s-app: nginx-ingress-controller
    version: "__KUBE_NGINX_INGRESS_CONTROLLER_VERSION__"
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: nginx-ingress-controller
      version: "__KUBE_NGINX_INGRESS_CONTROLLER_VERSION__"
  template:
    metadata:
      labels:
        k8s-app: nginx-ingress-controller
        version: "__KUBE_NGINX_INGRESS_CONTROLLER_VERSION__"
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      # hostNetwork makes it possible to use ipv6 and to preserve the source IP correctly regardless of docker configuration
      # however, it is not a hard dependency of the nginx-ingress-controller itself and it may cause issues if port 10254 already is taken on the host
      # that said, since hostPort is broken on CNI (https://github.com/kubernetes/kubernetes/issues/31307) we have to use hostNetwork where CNI is used
      # like with kubeadm
      # hostNetwork: true
      terminationGracePeriodSeconds: 60
      containers:
      - name: nginx-ingress-controller
        image: __KUBE_NGINX_INGRESS_CONTROLLER_IMAGE__
        imagePullPolicy: IfNotPresent
        args:
        - /nginx-ingress-controller
        - --annotations-prefix=nginx.ingress.kubernetes.io
        - --apiserver-host=__KUBE_INSECURE_APISERVER__
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
        - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        - name: https
          containerPort: 443
          hostPort: 443
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-controller
  namespace: kube-system
  labels:
    k8s-app: nginx-ingress-controller
    version: "__KUBE_NGINX_INGRESS_CONTROLLER_VERSION__"
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: __KUBE_INGRESS_PORT__
  selector:
    k8s-app: nginx-ingress-controller
    version: "__KUBE_NGINX_INGRESS_CONTROLLER_VERSION__"
